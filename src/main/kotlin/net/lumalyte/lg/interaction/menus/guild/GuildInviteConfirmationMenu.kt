package net.lumalyte.lg.interaction.menus.guild

import com.github.stefvanschie.inventoryframework.gui.GuiItem
import com.github.stefvanschie.inventoryframework.gui.type.ChestGui
import com.github.stefvanschie.inventoryframework.pane.StaticPane
import net.lumalyte.lg.application.services.GuildService
import net.lumalyte.lg.application.services.MemberService
import net.lumalyte.lg.domain.entities.Guild
import net.lumalyte.lg.interaction.menus.Menu
import net.lumalyte.lg.interaction.menus.MenuNavigator
import net.lumalyte.lg.utils.lore
import net.lumalyte.lg.utils.name
import org.bukkit.Material
import org.bukkit.entity.Player
import org.bukkit.event.inventory.ClickType
import org.bukkit.inventory.ItemStack
import org.bukkit.inventory.meta.SkullMeta
import org.koin.core.component.KoinComponent
import org.koin.core.component.inject
import java.util.*

class GuildInviteConfirmationMenu(private val menuNavigator: MenuNavigator, private val player: Player,
                                 private val guild: Guild, private val targetPlayer: Player): Menu, KoinComponent {

    private val guildService: GuildService by inject()
    private val memberService: MemberService by inject()

    override fun open() {
        // Create 3x9 chest GUI
        val gui = ChestGui(3, "ยง6Confirm Invite - ${guild.name}")
        val pane = StaticPane(0, 0, 9, 3)
        gui.setOnTopClick { guiEvent -> guiEvent.isCancelled = true }
        gui.setOnBottomClick { guiEvent ->
            if (guiEvent.click == ClickType.SHIFT_LEFT || guiEvent.click == ClickType.SHIFT_RIGHT) {
                guiEvent.isCancelled = true
            }
        }

        // Info display
        addInfoDisplay(pane, 0, 0)

        // Player info
        addPlayerInfo(pane, 2, 0)

        // Action buttons
        addConfirmButton(pane, 4, 1)
        addCancelButton(pane, 6, 1)

        gui.addPane(pane)
        gui.show(player)
    }

    private fun addInfoDisplay(pane: StaticPane, x: Int, y: Int) {
        val infoItem = ItemStack(Material.BOOK)
            .name("ยงa๐จ SEND INVITATION")
            .lore("ยง7Send an invitation to join")
            .lore("ยง7the guild.")
            .lore("ยง7")
            .lore("ยงeThe player will receive a message")
            .lore("ยงewith instructions to accept.")
            .lore("ยง7")
            .lore("ยง7They can use:")
            .lore("ยง7/guild join ${guild.name}")

        pane.addItem(GuiItem(infoItem), x, y)
    }

    private fun addPlayerInfo(pane: StaticPane, x: Int, y: Int) {
        val head = ItemStack(Material.PLAYER_HEAD)
        val meta = head.itemMeta as SkullMeta

        // Set skull owner
        meta.owningPlayer = targetPlayer
        head.itemMeta = meta

        val playerItem = head.name("ยงa๐ค ${targetPlayer.name}")
            .lore("ยง7Player: ยงf${targetPlayer.name}")
            .lore("ยง7Status: ยงaOnline")
            .lore("ยง7")
            .lore("ยงeWill receive invitation")

        pane.addItem(GuiItem(playerItem), x, y)
    }

    private fun addConfirmButton(pane: StaticPane, x: Int, y: Int) {
        val confirmItem = ItemStack(Material.GREEN_WOOL)
            .name("ยงaโ SEND INVITE")
            .lore("ยง7Send invitation to player")
            .lore("ยง7Click to proceed")

        val confirmGuiItem = GuiItem(confirmItem) {
            sendInvite()
        }
        pane.addItem(confirmGuiItem, x, y)
    }

    private fun addCancelButton(pane: StaticPane, x: Int, y: Int) {
        val cancelItem = ItemStack(Material.RED_WOOL)
            .name("ยงcโ CANCEL")
            .lore("ยง7Return to invite menu")
            .lore("ยง7No invitation will be sent")

        val cancelGuiItem = GuiItem(cancelItem) {
            menuNavigator.openMenu(GuildInviteMenu(menuNavigator, player, guild))
        }
        pane.addItem(cancelGuiItem, x, y)
    }

    private fun sendInvite() {
        // Check if player is already in a guild
        if (memberService.isPlayerInGuild(targetPlayer.uniqueId, guild.id)) {
            player.sendMessage("ยงcโ ${targetPlayer.name} is already in your guild!")
            menuNavigator.openMenu(GuildInviteMenu(menuNavigator, player, guild))
            return
        }

        // Send invitation message
        player.sendMessage("ยงaโ Invitation sent to ${targetPlayer.name}!")
        targetPlayer.sendMessage("ยง6๐จ Guild Invitation")
        targetPlayer.sendMessage("ยง7${player.name} invited you to join ยงf${guild.name}")
        targetPlayer.sendMessage("ยง7Type ยงa/guild join ${guild.name} ยง7to accept")
        targetPlayer.sendMessage("ยง7Or ยงc/guild decline ${guild.name} ยง7to decline")

        // TODO: Store invitation in database for later acceptance
        // For now, just show the message

        // Return to member management menu
        menuNavigator.openMenu(GuildMemberManagementMenu(menuNavigator, player, guild))
    }

    override fun passData(data: Any?) {
        // No data passing needed for confirmation menu
    }
}
